//
//  MeetingViewController.m
//  BaiRuiTuo
//
//  Created by kingyee on 15/1/13.
//  Copyright (c) 2015年 Kingyee. All rights reserved.
//

#import "MeetingViewController.h"
#import "Define.h"
#import "MeetingViewCell.h"
#import "BRTProgressViewController.h"
#import "BRTAlertViewController.h"
#import "BRTMeetingManager.h"
#import "MeetingDetailViewController.h"
#import "SVProgressHUD.h"

#define kLeftButtonTag 100000
#define kCenterButtonTag 200000
#define kRightButtonTag 300000

@interface MeetingViewController () <UITableViewDataSource, UITableViewDelegate, MeetingViewCellDelegate>
{
    NSInteger rowCount;
}

@property (weak, nonatomic) IBOutlet UITableView *tableView;
@property (nonatomic, weak) NSMutableArray *meetings;
@property (nonatomic, strong) BRTProgressViewController *progressViewCtrl;
@property (strong, nonatomic) BRTAlertViewController *alerViewCtrl;

@end

@implementation MeetingViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(uploadSuccess:) name:kBRTUploadSuccessNotification object:nil];
    
    self.alerViewCtrl = [[BRTAlertViewController alloc] init];
//    [self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@"MeetingCell"];
    // Do any additional setup after loading the view.
    self.tableView.rowHeight = 44.0f;
    
    NSMutableArray *array = [[BRTMeetingManager sharedManager] meetings];
    self.meetings = array;
    rowCount = array.count;
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.tableView reloadData];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)showMeetingDetail:(BRTMeetingModel*)meeting {
    [self performSegueWithIdentifier:@"showMeetingDetail" sender:meeting];
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([segue.identifier isEqualToString:@"showMeetingDetail"]) {
        MeetingDetailViewController *dvc = segue.destinationViewController;
        dvc.meetingDetail = [(BRTMeetingModel*)sender meetingDetail];
        [[BRTMeetingManager sharedManager] setCurrentMeeting:sender];
    }
}

- (void)uploadMeeting:(BRTMeetingModel*)meeting;
{
    self.progressViewCtrl = [[BRTProgressViewController alloc] init];
    self.progressViewCtrl.meeting = meeting;
    [self.navigationController.view addSubview:self.progressViewCtrl.view];
}

- (void)uploadSuccess:(NSNotification*)noti
{
    BRTMeetingModel *meeting = [[noti userInfo] objectForKey:@"Meeting"];
    meeting.meetingState = @(UploadedState);
    NSDate *date = [NSDate date];
    meeting.uploadTime = date;
    int time = [date timeIntervalSince1970];
    [[BRTMeetingManager sharedManager] updateValue:@(UploadedState) forKey:kBRTMeetingStateKey withMeetingID:meeting.meetingID];
    [[BRTMeetingManager sharedManager] updateValue:@(time) forKey:kBRTMeetingUploadTimeKey withMeetingID:meeting.meetingID];
    [self.tableView reloadData];
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    // Return the number of sections.
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    // Return the number of rows in the section.
    return rowCount;//self.meetings.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    MeetingViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MeetingCell" forIndexPath:indexPath];
    cell.backgroundView = nil;
    cell.backgroundColor = [UIColor clearColor];
    
    // Configure the cell...
    NSInteger row = indexPath.row;
    
    cell.leftButton.tag = kLeftButtonTag + row;
    cell.centerButton.tag = kCenterButtonTag + row;
    cell.rightButton.tag = kRightButtonTag + row;
    cell.delegate = self;
    
    NSString *typeString = nil;
    switch (self.meetingType) {
        case OfficeMeeting:
            typeString = @"科室会";
            break;
        case HospitalMeeting:
            typeString = @"院内会";
            break;
        case CityMeeting:
            typeString = @"城市会";
            break;
        default:
            break;
    }
    cell.typeLabel.text = typeString;
    
    BRTMeetingModel *meeting = self.meetings[row];
    cell.numberLabel.text = meeting.meetingID;
    cell.dateLabel.text = meeting.meetingTime;
    cell.nameLabel.text = meeting.meetingName;
    cell.officeLabel.text = meeting.meetingOffice;
    cell.state = [meeting.meetingState intValue];
    
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
}

#pragma mark - Meeting view cell delegate
- (void)meetingViewCell:(MeetingViewCell *)cell didClickedButtonWithTag:(NSInteger)tag
{
    NSInteger row;
    NSInteger btnType = 0;
    if (tag < kLeftButtonTag) {
        row = -1;
    }
    else if (tag < kCenterButtonTag) {
        row = tag - kLeftButtonTag;
        btnType = 1;
    }
    else if (tag < kRightButtonTag) {
        row = tag - kCenterButtonTag;
        btnType = 2;
    }
    else {
        row = tag - kRightButtonTag;
        btnType = 3;
    }
    if (row < 0 || row >= rowCount) {
        return;
    }
    BRTMeetingModel *meetingModel = self.meetings[row];
    NSDateFormatter *dateFmt = [[NSDateFormatter alloc] init];
    dateFmt.dateFormat = @"yyyy-MM-dd";
    NSDate *meetingDate = [dateFmt dateFromString:meetingModel.meetingTime];
    NSDate *today = [NSDate date];
    NSTimeInterval oneDay = 60 * 60 * 24;
    int dayOffset = ceil([meetingDate timeIntervalSinceDate:today]/oneDay);
    
    NSInteger state = [meetingModel.meetingState integerValue];
    if (state == BeforeMeetingState) {
        if (btnType == 1) {
            if (dayOffset >= 6) {
                [SVProgressHUD showImage:nil status:@"时间未到，不能开始会议"];
            }
            else {
                meetingModel.meetingState = @(InMeetingState);
                [[BRTMeetingManager sharedManager] updateValue:@(InMeetingState) forKey:kBRTMeetingStateKey withMeetingID:meetingModel.meetingID];
                [self.tableView reloadData];
                [self showMeetingDetail:meetingModel];
            }
        }
        else if (btnType == 3) {
            self.alerViewCtrl.message = @"此次会议将被取消，此操作不能恢复，请确认是否取消！";
            __block MeetingViewController *blockSelf = self;
            __block BRTMeetingModel *blockMeeting = meetingModel;
            __block BRTMeetingManager *blockMeetingMan = [BRTMeetingManager sharedManager];
            [self.alerViewCtrl addActionWithHandler:^{
                blockMeeting.meetingState = @(CancelByAppState);
                [blockMeetingMan updateValue:@(CancelByAppState) forKey:kBRTMeetingStateKey withMeetingID:blockMeeting.meetingID];
                [blockSelf.tableView reloadData];
            }];
            [self.navigationController.view addSubview:self.alerViewCtrl.view];
        }
    }
    else if (state == InMeetingState) {
        if (btnType == 2) {
            [self showMeetingDetail:meetingModel];
        }
    }
    else if (state == AfterMeetingState || state == UploadedState) {
        if (btnType == 1) {
            [self uploadMeeting:meetingModel];
        }
        else if (btnType == 3) {
            [self showMeetingDetail:meetingModel];
        }
    }
}

@end
