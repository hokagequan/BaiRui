//
//  BRTMeetingManager.m
//  BaiRuiTuo
//
//  Created by kingyee on 15/1/20.
//  Copyright (c) 2015年 Kingyee. All rights reserved.
//

#import "BRTMeetingManager.h"

#define kBRTDataFolderName @"BaiRuiTuo"
#define kBRTDatabaseName @"brt.db"

@implementation BRTMeetingManager

+ (instancetype)sharedManager
{
    static id shardInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        shardInstance = [[self alloc] init];
    });
    return shardInstance;
}

- (void)createDatabase
{
    NSString *dbPath = [[self dataFolder] stringByAppendingPathComponent:kBRTDatabaseName];
    FMDatabase *db = [FMDatabase databaseWithPath:dbPath];
    self.dbPath = dbPath;

    if (![db open]) {
        NSLog(@"%@", [db lastErrorMessage]);
        return;
    }
    
    [db executeStatements:@"create table if not exists 'brt_meeting' ('id' INTEGER PRIMARY KEY  AUTOINCREMENT NOT NULL, 'meeting_id' varchar, 'meeting_type' varchar, 'meeting_time' varchar, 'meeting_name' varchar, 'meeting_office' varchar, 'meeting_state' integer, 'user_name' varchar, 'meeting_manager' varchar, 'begin_time' integer, 'end_time' integer, 'upload_time' integer)"];
    
    BOOL result = [db executeStatements:@"create table if not exists 'brt_meeting_detail' ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'meeting_id' varchar, 'image_type' integer, 'image_name' varchar)"];
    if (result == NO) {
        NSLog(@"%@", [db lastErrorMessage]);
    }
    
    [db close];
}

- (NSMutableArray*)loadMeetings {
    NSMutableArray *array = [[NSMutableArray alloc] init];
    NSDateFormatter *dateFmt = [[NSDateFormatter alloc] init];
    dateFmt.dateFormat = @"yyyy-MM-dd";
    NSDate *today = [NSDate date];
    NSTimeInterval oneDay = 60 * 60 * 24;
    
    NSString *dbPath = [[self dataFolder] stringByAppendingPathComponent:kBRTDatabaseName];
    FMDatabase *db = [FMDatabase databaseWithPath:dbPath];
    
    if (![db open]) {
        NSLog(@"%@", [db lastErrorMessage]);
        return nil;
    }
    
    FMResultSet *resultSet = [db executeQuery:@"select count(*) as rowcount from brt_meeting"];
    if ([resultSet next]) {
        int count = [resultSet intForColumn:@"rowcount"];
        if (count == 0) {
            NSString *filePath = [[NSBundle mainBundle] pathForResource:@"meeting" ofType:@"txt"];
            NSString *srcString = [[NSString alloc] initWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:NULL];
            NSMutableArray *testArray = [NSMutableArray array];
            NSArray *rows = [srcString componentsSeparatedByString:@"\n\n"];
            for (NSString *subStr in rows) {
                NSArray *columns = [subStr componentsSeparatedByString:@"\n"];
                [testArray addObject:columns];
            }
            for (NSArray *columns in testArray) {
                NSString *meetingID = columns[0];
                NSString *meetingType = columns[1];
                NSString *meetingTime = columns[2];
                NSString *meetingName = columns[3];
                NSString *office = columns[4];
                int state = [columns[5] intValue];
                BOOL retValue = [db executeUpdate:@"insert into brt_meeting (id, meeting_id, meeting_type, meeting_time, meeting_name, meeting_office, meeting_state, user_name, meeting_manager, begin_time, end_time, upload_time) values (?,?,?,?,?,?,?,?,?,?,?,?)",
                                 NULL, meetingID, meetingType, meetingTime, meetingName, office, @(state), @"", @"", @(0), @(0), @(0)];
                if (!retValue) {
                    NSLog(@"%@", [db lastErrorMessage]);
                }
            }
        }
    }
    [resultSet close];
    
    NSDate *minValidDate = [today dateByAddingTimeInterval:oneDay * -6];
    NSString *minTime = [dateFmt stringFromDate:minValidDate];
    
    BOOL result = [db executeUpdate:@"update brt_meeting set meeting_state = ? where meeting_time < ?", @(ExpiredState), minTime];
    if (result == NO) {
        NSLog(@"%@", [db lastErrorMessage]);
    }
    
    FMResultSet *allMeeting = [db executeQuery:@"select * from brt_meeting where user_name = ''"];
    while ([allMeeting next]) {
        BRTMeetingModel *meeting = [[BRTMeetingModel alloc] init];
        meeting.meetingID = [allMeeting stringForColumn:kBRTMeetingIDKey];
        meeting.meetingName = [allMeeting stringForColumn:kBRTMeetingNameKey];
        meeting.meetingOffice = [allMeeting stringForColumn:kBRTMeetingOfficeKey];
        meeting.meetingTime = [allMeeting stringForColumn:kBRTMeetingTimeKey];
        meeting.meetingState = @([allMeeting intForColumn:kBRTMeetingStateKey]);
        meeting.meetingManager = [allMeeting stringForColumn:kBRTMeetingManagerKey];
        
        int beginTime = [allMeeting intForColumn:kBRTMeetingBeginTimeKey];
        int endTime = [allMeeting intForColumn:kBRTMeetingEndTimeKey];
        int uploadTime = [allMeeting intForColumn:kBRTMeetingUploadTimeKey];
        if (beginTime > 0) {
            meeting.beginTime = [NSDate dateWithTimeIntervalSince1970:beginTime];
        }
        if (endTime > 0) {
            meeting.endTime = [NSDate dateWithTimeIntervalSince1970:endTime];
        }
        if (uploadTime > 0) {
            meeting.uploadTime = [NSDate dateWithTimeIntervalSince1970:uploadTime];
        }
        
        [array addObject:meeting];
    }
    [allMeeting close];
    
    for (BRTMeetingModel *meeting in array) {
        NSString *meetingDir = [[self dataFolder] stringByAppendingPathComponent:meeting.meetingID];
        BRTMeetingDetailModel *meetingDetail = meeting.meetingDetail;
        FMResultSet *allImages = [db executeQuery:@"select * from brt_meeting_detail where meeting_id = ?", meeting.meetingID];
        while ([allImages next]) {
            BRTImageType imageType = [allImages intForColumn:@"image_type"];
            NSString *imageName = [allImages stringForColumn:@"image_name"];
            NSString *imagePath = [meetingDir stringByAppendingPathComponent:imageName];
            switch (imageType) {
                case BeforeMeetingType:
                    [meetingDetail.beforeMeetingImages addObject:imagePath];
                    break;
                case InMeetingType:
                    [meetingDetail.inMeetingImages addObject:imagePath];
                    break;
                case AfterMeetingType:
                    [meetingDetail.afterMeetingImages addObject:imagePath];
                    break;
                case TeaBreakType:
                    [meetingDetail.teaBreakImages addObject:imagePath];
                    break;
                case CarServiceType:
                    [meetingDetail.carServiceImages addObject:imagePath];
                    break;
                case DiningType:
                    [meetingDetail.diningImages addObject:imagePath];
                    break;
                case OtherType:
                    [meetingDetail.otherImages addObject:imagePath];
                    break;
                    
                default:
                    break;
            }
        }
        [allMeeting close];
    }
    
    [db close];
    
    return array;
}

- (NSMutableArray*)meetings {
    
    if (_meetings) {
        return _meetings;
    }
    
    NSMutableArray *array = [self loadMeetings];
    _meetings = array;
    
    return _meetings;
}

- (NSString*)dataFolder
{
    NSString *libraryDir = [NSHomeDirectory() stringByAppendingPathComponent:@"Library"];
    NSString *dataDir = [libraryDir stringByAppendingPathComponent:kBRTDataFolderName];
    NSFileManager *fm = [NSFileManager defaultManager];
    if ([fm fileExistsAtPath:dataDir]) {
        return dataDir;
    }
    BOOL result = [fm createDirectoryAtPath:dataDir withIntermediateDirectories:YES attributes:nil error:NULL];
    if (result == NO) {
        NSLog(@"Failed to create data folder!");
        return nil;
    }
    return dataDir;
}

- (NSString*)writeData:(NSData*)data  withImageType:(BRTImageType)imageType
{
    BRTMeetingModel *meeting = self.currentMeeting;
    NSString *meetingID = meeting.meetingID;
    NSString *meetingDir = [[self dataFolder] stringByAppendingPathComponent:meetingID];
    NSFileManager *fm = [NSFileManager defaultManager];
    
    NSError *error = nil;
    BOOL result;
    if (![fm fileExistsAtPath:meetingDir]) {
        result = [fm createDirectoryAtPath:meetingDir withIntermediateDirectories:YES attributes:nil error:&error];
        if (result == NO) {
            NSLog(@"创建文件夹失败：%@", [error description]);
            return nil;
        }
    }
    NSString *fileName = @"";
    switch (imageType) {
        case BeforeMeetingType:
            fileName = @"beforeMeeting";
            break;
        case InMeetingType:
            fileName = @"inMeeting";
            break;
        case AfterMeetingType:
            fileName = @"afterMeeting";
            break;
        case TeaBreakType:
            fileName = @"teaBreak";
            break;
        case CarServiceType:
            fileName = @"carService";
            break;
        case DiningType:
            fileName = @"dining";
            break;
        case OtherType:
            fileName = @"other";
            break;
            
        default:
            break;
    }
    NSTimeInterval time = [[NSDate date] timeIntervalSince1970];
    fileName = [fileName stringByAppendingFormat:@"%d.jpg", (int)time];
    NSString *filePath = [meetingDir stringByAppendingPathComponent:fileName];
    result = [data writeToFile:filePath options:NSDataWritingAtomic error:&error];
    if (result == NO) {
        NSLog(@"保存图片失败：%@", [error description]);
        return nil;
    }
    
    FMDatabase *db = [FMDatabase databaseWithPath:self.dbPath];
    if (![db open]) {
        NSLog(@"%@", [db lastErrorMessage]);
        return nil;
    }
    result = [db executeUpdate:@"insert into brt_meeting_detail (id, meeting_id, image_type, image_name) values(NULL,?,?,?)", meetingID, @(imageType), fileName];
    if (result == NO) {
        NSLog(@"%@", [db lastErrorMessage]);
        return nil;
    }
    
    [db close];
    
    return filePath;
}

- (void)updateValue:(id)value forKey:(NSString*)key withMeetingID:(NSString*)meetingID
{
    FMDatabase *db = [FMDatabase databaseWithPath:self.dbPath];
    if (![db open]) {
        NSLog(@"%@", [db lastErrorMessage]);
        return;
    }
    
    if ([key isEqualToString:kBRTMeetingStateKey]) {
        BOOL result = [db executeUpdate:@"update brt_meeting set meeting_state = ? where meeting_id = ?", value, meetingID];
        if (result == NO) {
            NSLog(@"update %@ error:%@", key, [db lastErrorMessage]);
        }
    }
    else if ([key isEqualToString:kBRTMeetingBeginTimeKey]) {
        BOOL result = [db executeUpdate:@"update brt_meeting set begin_time = ? where meeting_id = ?", value, meetingID];
        if (result == NO) {
            NSLog(@"update %@ error:%@", key, [db lastErrorMessage]);
        }
    }
    else if ([key isEqualToString:kBRTMeetingEndTimeKey]) {
        BOOL result = [db executeUpdate:@"update brt_meeting set end_time = ? where meeting_id = ?", value, meetingID];
        if (result == NO) {
            NSLog(@"update %@ error:%@", key, [db lastErrorMessage]);
        }
    }
    else if ([key isEqualToString:kBRTMeetingUploadTimeKey]) {
        BOOL result = [db executeUpdate:@"update brt_meeting set upload_time = ? where meeting_id = ?", value, meetingID];
        if (result == NO) {
            NSLog(@"update %@ error:%@", key, [db lastErrorMessage]);
        }
    }
    
    [db close];
}

- (void)deleteImage:(NSString*)imagePath withMeetingID:(NSString*)meetingID
{    
    FMDatabase *db = [FMDatabase databaseWithPath:self.dbPath];
    if (![db open]) {
        NSLog(@"%@", [db lastErrorMessage]);
        return;
    }
    
    NSString *imageName = [imagePath lastPathComponent];
    BOOL result = [db executeUpdate:@"delete from brt_meeting_detail where meeting_id = ? and image_name = ?", meetingID, imageName];
    if (result == NO) {
        NSLog(@"%@", [db lastErrorMessage]);
        return;
    }
    
    [db close];
    
    NSFileManager *fm = [NSFileManager defaultManager];
    [fm removeItemAtPath:imagePath error:NULL];
}

@end
